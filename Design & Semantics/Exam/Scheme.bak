#lang racket

;Jan 2019
;Define a Scheme function SCATTER-GATHER which takes two
;arguments, a list INDICES of indices and a list VALS of values,
;and returns a list of the same length as INDICES but with each
;value K replaced by the K-th element of VALS, or if that is out of
;range, by #f.

(define (scatterGather indices values)
  (cond ((null? indices) '())
        ((<(car indices)(length values)) 
        (cons (list-ref values (car indices))(scatterGather (cdr indices) values)))
        (else (cons '#f(scatterGather (cdr indices) values)))))
 

;(scatterGather '(0 1 4 1 1 7 2) '(a b c d e))
;=> (a b e b b #f c)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;Autumn 2019
;Define a Scheme function PLUSEVENS which takes a list of number and 
;returns the sum of those that occur in even positions in the list.

(define (plusevens lst)
  (if (> 3 (length lst)) ; length less than 3
            (car lst)                    
            (+ (car lst)(plusevens (cddr lst)))))

;(plusevens '(1 20 300 4000 50000 600000)) 
;=> 50301

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;Jan 2018
;Define a Scheme function tear which takes two arguments, a
;predicate p? and a list xs, and returns a list of two lists, the
;first of which is the elements of xs that pass p?, and the second
;of which is the elements of xs that fail it, both in order.

(define (tear p xs)
  (list (filter p xs)(filter (lambda (notNum)(not (p notNum))) xs)))

;Filter returns a list with the elements of "xs" for which "(位 (x)(not (p? x)))" produces a true value.
;The "(位 (x)(not (p? x)))" procedure is applied to each element from first to last.
;List returns a newly allocated list.

(tear number? '(a b c 1 2 3 d e f))
;=> ((1 2 3) (a b c d e f))
(tear (lambda (x) (> x 5)) '(1 10 2 12 3 13))
;=> ((10 12 13) (1 2 3))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;Aug 2018
;Define a Scheme function map-skip which takes a function and a
;list and returns the result of applying the given function to
;every other element of the given list, starting with the first
;element.

;(define map-skip
;  (位 (func l)
;    (cond ((null? l)'());If l is empty/null, return an empty list
;          (else
;           (append (list (func (car l))(cadr l))(map-skip func(drop l 2)))))))

(define (map-skip func l)
  (cond ((null? l)'())
        ((=(length l)1)
         (cons(func (car l)) '()))
        (else
         (cons (func (car l)) (cons (cadr l) (map-skip func(cddr l)))))))
  

;(map-skip (位 (x) (+ x 1000)) '(1 2 3 4 5 6))
;=> (1001 2 1003 4 1005 6)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
